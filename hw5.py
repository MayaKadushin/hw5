
from cmath import nan
from email import message
import pathlib
from pickletools import uint8
import string
from typing import Union
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import itertools 
import json
from typing import Tuple
import math

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        
        try:
            self.data_fname = pathlib.Path(data_fname)
        except:
            message_type_error = "input must be a string or a pathlib path"
            raise TypeError(message_type_error)

        if not self.data_fname.is_file():
            message_value_error = "file doesn't exist!"
            raise ValueError(message_value_error)

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        with open(self.data_fname) as json_path:
            data = json.load(json_path)
        
        self.data = pd.DataFrame(data)
        return self.data
 

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
        Number of people in a given bin
        bins : np.ndarray
        Bin edges
        """

        ages = self.data["age"]
        ages_no_nans = [x for x in ages if isinstance(x , (float, int)) == True]

        histogram = plt.hist(ages_no_nans, bins = list(range(0, 110, 10)))
        counts = histogram[0]
        bins = histogram[1]

        plt.ylabel("Count")
        plt.xlabel("Age")
        plt.xlim([0,100])
        plt.show()

        return (counts, bins)

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
        A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
        the (ordinal) index after a reset.
        """
        new_df = self.data.copy()
        emails = self.data["email"]
        mask = np.ones(np.shape(emails))

        for ind, email in enumerate(emails):
            at_ind = email.find('@')
            
            if email[0] != '@' and email[0] != '.' and email[-1] != '@' and email[-1] != '.' and email.count('@') == 1 and email.count('.')>=1 and email[at_ind+1] != '.':
                mask[ind] = 0 # save 
            else:
                mask[ind] = 1 # drop
        
        mask = mask.astype(np.bool)

        new_df = new_df.drop(new_df[mask].index).reset_index(drop= True)
        return new_df

    
    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
        The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
        Row indices of the students that their new grades were generated
        """
        new_df = self.data.copy()
        rows_number = len(new_df)
        rows_changed = []

        for row in range(rows_number):
            curr_row = new_df.loc[row, ['q1', 'q2', 'q3', 'q4', 'q5']]
            if any(isinstance(element, str) for element  in curr_row):
                new_df.loc[row, ['q1', 'q2', 'q3', 'q4', 'q5']] = curr_row.replace('nan', pd.to_numeric(curr_row, errors='coerce').mean())
                rows_changed.append(row)
                
        rows_changed = np.array(rows_changed)

        return(new_df, rows_changed)

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
        Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
        A new DF with a new column - "score".
        """
        new_df = self.data.copy()
        rows_number = len(new_df)
        score = []

        for row in range(rows_number):
            curr_row = new_df.loc[row, ['q1', 'q2', 'q3', 'q4', 'q5']]
            count = curr_row.tolist().count('nan')
            if count>maximal_nans_per_sub:
                subj_score = np.nan
            else:
                subj_score = pd.to_numeric(curr_row, errors='coerce').mean()
                subj_score = math.floor(subj_score)
            
            score.append(subj_score)

        score = pd.array(score, dtype = pd.UInt8Dtype())
        new_df['score'] = score
        return new_df

    